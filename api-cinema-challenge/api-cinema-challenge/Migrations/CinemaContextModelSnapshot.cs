// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("TimeUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.HasKey("Id");

                    b.ToTable("customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Elvis@something.com",
                            Name = "Audrey Jagger",
                            Phone = "78484604",
                            TimeCreated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3660),
                            TimeUpdated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3660)
                        },
                        new
                        {
                            Id = 2,
                            Email = "Barack@gov.nl",
                            Name = "Mick Hendrix",
                            Phone = "50708225",
                            TimeCreated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3696),
                            TimeUpdated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3696)
                        },
                        new
                        {
                            Id = 3,
                            Email = "Jimi@bbc.co.uk",
                            Name = "Kate Hepburn",
                            Phone = "75726237",
                            TimeCreated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3699),
                            TimeUpdated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3699)
                        },
                        new
                        {
                            Id = 4,
                            Email = "Kate@gov.nl",
                            Name = "Barack Obama",
                            Phone = "92733906",
                            TimeCreated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3700),
                            TimeUpdated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3700)
                        },
                        new
                        {
                            Id = 5,
                            Email = "Oprah@something.com",
                            Name = "Mick Hepburn",
                            Phone = "78780329",
                            TimeCreated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3702),
                            TimeUpdated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3702)
                        },
                        new
                        {
                            Id = 6,
                            Email = "Charles@google.com",
                            Name = "Mick Middleton",
                            Phone = "86741622",
                            TimeCreated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3704),
                            TimeUpdated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3704)
                        },
                        new
                        {
                            Id = 7,
                            Email = "Donald@nasa.org.us",
                            Name = "Donald Jagger",
                            Phone = "68075963",
                            TimeCreated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3732),
                            TimeUpdated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3732)
                        },
                        new
                        {
                            Id = 8,
                            Email = "Donald@something.com",
                            Name = "Mick Winslet",
                            Phone = "72819482",
                            TimeCreated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3734),
                            TimeUpdated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3734)
                        },
                        new
                        {
                            Id = 9,
                            Email = "Audrey@theworld.ca",
                            Name = "Donald Winfrey",
                            Phone = "26431278",
                            TimeCreated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3735),
                            TimeUpdated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3735)
                        },
                        new
                        {
                            Id = 10,
                            Email = "Kate@nasa.org.us",
                            Name = "Oprah Presley",
                            Phone = "67346101",
                            TimeCreated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3737),
                            TimeUpdated = new DateTime(2024, 2, 8, 14, 47, 42, 27, DateTimeKind.Utc).AddTicks(3737)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtime_mins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A movie about Green",
                            Rating = "5/10",
                            RuntimeMins = 86,
                            Title = "Two Cars"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A movie about Rose Smelling",
                            Rating = "4/10",
                            RuntimeMins = 235,
                            Title = "Fifteen Flowers"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A movie about Bitter",
                            Rating = "6/10",
                            RuntimeMins = 184,
                            Title = "Two Flowers"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A movie about Transparent",
                            Rating = "2/10",
                            RuntimeMins = 259,
                            Title = "The Flowers"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A movie about Bitter",
                            Rating = "6/10",
                            RuntimeMins = 389,
                            Title = "An army of Leopards"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A movie about Green",
                            Rating = "4/10",
                            RuntimeMins = 213,
                            Title = "The Houses"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A movie about Bitter",
                            Rating = "4/10",
                            RuntimeMins = 142,
                            Title = "A bunch of Flowers"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A movie about Microscopic",
                            Rating = "4/10",
                            RuntimeMins = 182,
                            Title = "A bunch of Leopards"
                        },
                        new
                        {
                            Id = 9,
                            Description = "A movie about Purple",
                            Rating = "2/10",
                            RuntimeMins = 398,
                            Title = "The Cars"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A movie about Bitter",
                            Rating = "9/10",
                            RuntimeMins = 263,
                            Title = "A herd of Cars"
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("ScreenNum")
                        .HasColumnType("integer")
                        .HasColumnName("screen_num");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("TimeUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.HasKey("Id");

                    b.ToTable("screening");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer")
                        .HasColumnName("num_seats");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer")
                        .HasColumnName("screening_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Ticket", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Customer", null)
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
